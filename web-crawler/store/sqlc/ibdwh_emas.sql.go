// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ibdwh_emas.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmas = `-- name: CreateEmas :one
INSERT INTO ibdwh.emas (emas_id, jual, beli, created_at)
VALUES ($1, $2, $3, $4)
ON CONFLICT (emas_id) 
DO UPDATE SET 
    jual = EXCLUDED.jual,
    beli = EXCLUDED.beli,
    created_at = EXCLUDED.created_at
RETURNING emas_id, jual, beli, created_at, avg_bpkh
`

type CreateEmasParams struct {
	EmasID    string           `json:"emas_id"`
	Jual      pgtype.Numeric   `json:"jual"`
	Beli      pgtype.Numeric   `json:"beli"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateEmas(ctx context.Context, arg CreateEmasParams) (IbdwhEma, error) {
	row := q.db.QueryRow(ctx, createEmas,
		arg.EmasID,
		arg.Jual,
		arg.Beli,
		arg.CreatedAt,
	)
	var i IbdwhEma
	err := row.Scan(
		&i.EmasID,
		&i.Jual,
		&i.Beli,
		&i.CreatedAt,
		&i.AvgBpkh,
	)
	return i, err
}

const getAllEmas = `-- name: GetAllEmas :many
SELECT emas_id, jual, beli, created_at, avg_bpkh FROM ibdwh.emas
ORDER BY emas_id DESC
LIMIT $1
OFFSET $2
`

type GetAllEmasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllEmas(ctx context.Context, arg GetAllEmasParams) ([]IbdwhEma, error) {
	rows, err := q.db.Query(ctx, getAllEmas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IbdwhEma{}
	for rows.Next() {
		var i IbdwhEma
		if err := rows.Scan(
			&i.EmasID,
			&i.Jual,
			&i.Beli,
			&i.CreatedAt,
			&i.AvgBpkh,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalEmas = `-- name: GetTotalEmas :one
SELECT COUNT(*) FROM ibdwh.emas
`

func (q *Queries) GetTotalEmas(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalEmas)
	var count int64
	err := row.Scan(&count)
	return count, err
}
